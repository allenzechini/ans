---
# Play #1
- name: Generate/Edit BitWarden items
  hosts: localhost
  connection: local
  gather_facts: true
  any_errors_fatal: true
  tasks:
  - name: Set userlist for both plays
    set_fact:
      userlist: [ 'testuser1', 'testuser2', 'testuser3', 'testuser4' ]

  - name: Check bw status
    command: bw status
    register: status
    failed_when:  '"unlocked" not in status.stdout'
    changed_when: false

  - name: Get latest Bitwarden content
    command: bw sync

  - name: Check for existing user entries
    command: bw get item "{{ item }}"
    loop: 
    - "{{ userlist.0 }}"
    - "{{ userlist.1 }}"
    - "{{ userlist.2 }}"
    - "{{ userlist.3 }}"
    register: user_exists
    failed_when: '"More" in user_exists.stderr'
    changed_when: false
    no_log: true

  - name: Generate passwords
    command: 
      cmd: bw generate -uln --length 128
      strip_empty_ends: yes
    with_sequence: count=4
    register: pws
    no_log: true

  # Create section
  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.0 }}", pgen: "{{ pws.results.0.stdout }}" }
    when: '"Not found" in user_exists.results.0.stderr'
    no_log: true

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.1 }}", pgen: "{{ pws.results.1.stdout }}" }
    when: '"Not found" in user_exists.results.1.stderr'
    no_log: true

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.2 }}", pgen: "{{ pws.results.2.stdout }}" }
    when: '"Not found" in user_exists.results.2.stderr'
    no_log: true

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.3 }}", pgen: "{{ pws.results.3.stdout }}" }
    when: '"Not found" in user_exists.results.3.stderr'
    no_log: true

  # Edit section
  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.0 }}", pgen: "{{ pws.results.0.stdout }}", bw_item: "{{ user_exists.results.0.stdout }}" }
    when: '"Not found" not in user_exists.results.0.stderr'
    no_log: true

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.1 }}", pgen: "{{ pws.results.1.stdout }}", bw_item: "{{ user_exists.results.1.stdout }}" }
    when: '"Not found" not in user_exists.results.1.stderr'
    no_log: true

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.2 }}", pgen: "{{ pws.results.2.stdout }}", bw_item: "{{ user_exists.results.2.stdout }}" }
    when: '"Not found" not in user_exists.results.2.stderr'
    no_log: true

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.3 }}", pgen: "{{ pws.results.3.stdout }}", bw_item: "{{ user_exists.results.3.stdout }}" }
    when: '"Not found" not in user_exists.results.3.stderr'
    no_log: true

# Play #2
- name: Rotate
  hosts: vrepo101ubu
  #hosts: all
  become: true
  gather_facts: true
  tasks:
  - name: Update user
    user:
      name: "{{ item.username }}"
      password: "{{ item.pgen | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
      update_password: always
    loop:
    - { username: "{{ hostvars['localhost']['userlist'].0 }}", pgen: "{{ hostvars['localhost']['pws'].results.0.stdout }}" }
    - { username: "{{ hostvars['localhost']['userlist'].1 }}", pgen: "{{ hostvars['localhost']['pws'].results.1.stdout }}" }
    - { username: "{{ hostvars['localhost']['userlist'].2 }}", pgen: "{{ hostvars['localhost']['pws'].results.2.stdout }}" }
    - { username: "{{ hostvars['localhost']['userlist'].3 }}", pgen: "{{ hostvars['localhost']['pws'].results.3.stdout }}" }
    register: update_status
    ignore_errors: true
    no_log: true

  - name: Print update msg
    debug:
      msg: "{{ item }}'s password has been updated successfully"
    loop:
    - "{{ hostvars['localhost']['userlist'].0 }}"
    - "{{ hostvars['localhost']['userlist'].1 }}"
    - "{{ hostvars['localhost']['userlist'].2 }}"
    - "{{ hostvars['localhost']['userlist'].3 }}"
    when: update_status is succeeded
    no_log: true

  - name: Print failed msg
    debug:
      msg: "{{ item }}'s password was not updated"
    loop:
    - "{{ hostvars['localhost']['userlist'].0 }}"
    - "{{ hostvars['localhost']['userlist'].1 }}"
    - "{{ hostvars['localhost']['userlist'].2 }}"
    - "{{ hostvars['localhost']['userlist'].3 }}"
    when: update_status is failed
    no_log: true

