---
- name: Rotate passwords for user accounts
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    userlist: [ 'testuser1', 'testuser2', 'testuser3', 'testuser4' ]
  tasks:
  - name: Get latest Bitwarden content
    command: bw sync

  - name: Check for duplicate users
    command: bw get username "{{ item }}"
    loop: 
    - "{{ userlist.0 }}"
    - "{{ userlist.1 }}"
    - "{{ userlist.2 }}"
    - "{{ userlist.3 }}"

  - name: Generate passwords
    command: 
      cmd: bw generate -uln --length 128
      strip_empty_ends: yes
    with_sequence: count=4
    register: pws

  - name: Print pws
    debug:
      var: item
    loop:
    - "{{ pws.results.0.stdout }}"
    - "{{ pws.results.1.stdout }}"
    - "{{ pws.results.2.stdout }}"
    - "{{ pws.results.3.stdout }}"

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.0 }}", pgen: "{{ pws.results.0.stdout }}" }
    - { username: "{{ userlist.1 }}", pgen: "{{ pws.results.1.stdout }}" }
    - { username: "{{ userlist.2 }}", pgen: "{{ pws.results.2.stdout }}" }
    - { username: "{{ userlist.3 }}", pgen: "{{ pws.results.3.stdout }}" }
    register: long_jsons

#  - name: Get info
#    shell:
#      cmd: bw get password "{{ item }}"
#    loop:
#    - "{{ userlist }}"
#    register: testuser_pws
#
#  - name: Print info
#    debug:
#      var: item.stdout
#    loop: "{{ testuser_pws.results }}"

#  - name: Get full item template and substitute
#    shell:
#      cmd: bw get template item | jq '.name="{{ item.username }}" | .login="{{ item.login }}"'
#    loop:
#    - { username: "{{ userlist.0 }}", login: "{{ login_jsons.results.0.stdout }}" }
#    - { username: "{{ userlist.1 }}", login: "{{ login_jsons.results.1.stdout }}" }
#    - { username: "{{ userlist.2 }}", login: "{{ login_jsons.results.2.stdout }}" }
#    - { username: "{{ userlist.3 }}", login: "{{ login_jsons.results.3.stdout }}" }
#    register: full_jsons
#
#  - name: Print full JSONs
#    debug:
#      var: item.stdout | to_json
#    loop: "{{ full_jsons.results }}"
#
#  - name: Create items
#    shell:
#      cmd: echo "{{ item }}" | bw encode
#    loop:
#    - "{{ full_jsons.results.0.stdout_lines }}"
#    - "{{ full_jsons.results.1.stdout_lines }}"
#    - "{{ full_jsons.results.2.stdout_lines }}"
#    - "{{ full_jsons.results.3.stdout_lines }}"
#    register: encoded_jsons
#
#  - name: Print full JSONs
#    debug:
#      var: item.stdout
#    loop: "{{ encoded_jsons.results }}"

