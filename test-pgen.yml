---
# Play #1
- name: Generate new BitWarden items for new passwords
  hosts: localhost
  connection: local
  gather_facts: false
  any_errors_fatal: true
  vars:
    userlist: [ 'testuser1', 'testuser2', 'testuser3', 'testuser4' ]
  tasks:
  - name: Check bw status
    command: bw status
    register: status
    failed_when:  '"unlocked" not in status.stdout'
    changed_when: false

  - name: Get latest Bitwarden content
    command: bw sync

  - name: Check for existing user entries
    command: bw get item "{{ item }}"
    loop: 
    - "{{ userlist.0 }}"
    - "{{ userlist.1 }}"
    - "{{ userlist.2 }}"
    - "{{ userlist.3 }}"
    register: user_exists
    failed_when: '"More" in user_exists.stderr'
    changed_when: false
    #no_log: true

  - name: Generate passwords
    command: 
      cmd: bw generate -uln --length 128
      strip_empty_ends: yes
    with_sequence: count=4
    register: pws

  # Create section
  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.0 }}", pgen: "{{ pws.results.0.stdout }}" }
    when: '"Not found" in user_exists.results.0.stderr'

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.1 }}", pgen: "{{ pws.results.1.stdout }}" }
    when: '"Not found" in user_exists.results.1.stderr'

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.2 }}", pgen: "{{ pws.results.2.stdout }}" }
    when: '"Not found" in user_exists.results.2.stderr'

  - name: Get item templates, substitute, and create
    shell:
      cmd: bw get template item | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw create item
    loop:
    - { username: "{{ userlist.3 }}", pgen: "{{ pws.results.3.stdout }}" }
    when: '"Not found" in user_exists.results.3.stderr'

  # Edit section
  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.0 }}", pgen: "{{ pws.results.0.stdout }}", bw_item: "{{ user_exists.results.0.stdout }}" }
    when: '"Not found" not in user_exists.results.0.stderr'

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.1 }}", pgen: "{{ pws.results.1.stdout }}", bw_item: "{{ user_exists.results.1.stdout }}" }
    when: '"Not found" not in user_exists.results.1.stderr'

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.2 }}", pgen: "{{ pws.results.2.stdout }}", bw_item: "{{ user_exists.results.2.stdout }}" }
    when: '"Not found" not in user_exists.results.2.stderr'

  - name: Get item id, substitute, and edit
    shell:
      cmd: bw get item "{{ item.bw_item.id | quote }}" | jq ".name=\"{{ item.username | quote }}\" | .login=$(bw get template item.login | jq '.username="{{ item.username | quote }}" | .password="{{ item.pgen | quote }}"')" | bw encode | bw edit item "{{ item.bw_item.id | quote }}"
    loop:
    - { username: "{{ userlist.3 }}", pgen: "{{ pws.results.3.stdout }}", bw_item: "{{ user_exists.results.3.stdout }}" }
    when: '"Not found" not in user_exists.results.3.stderr'

# Play #2
#- name: Rotate passwords
#  hosts: all
#  gather_facts: false
#  tasks:
#  - name: TBD
#  vars_prompt:
#  - name: username
#    prompt: username
#    private: no
#
#  - name: password
#    prompt: password
#    private: yes
#    encrypt: sha512_crypt
#    confirm: yes
#
#  tasks:
#  - name: Update user
#    user:
#      name: "{{ username }}"
#      password: "{{ password }}"
#      update_password: always
#    register: update_status
#    ignore_errors: true
#
#  - name: Print update_status
#    debug:
#      var: update_status
#
#  - name: Print update msg
#    debug:
#      msg: "{{ username }}'s password has been updated successfully"
#    when: update_status is succeeded
#
#  - name: Print failed msg
#    debug:
#      msg: "{{ username }}'s password was not updated"
#    when: update_status is failed
#
